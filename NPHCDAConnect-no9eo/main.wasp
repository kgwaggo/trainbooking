app NPHCDAConnect {
  wasp: {
    version: "^0.11.1"
  },
  title: "NPHCDAConnect",
  client: {
    rootComponent: import { Layout } from "@client/Layout.jsx",
  },
  db: {
    prisma: {
      clientPreviewFeatures: ["extendedWhereUnique"]
    }
  },
  auth: {
    userEntity: User,
    methods: {
      usernameAndPassword: {}
    },
    onAuthFailedRedirectTo: "/login",
    onAuthSucceededRedirectTo: "/"
  },
}

route LoginRoute { path: "/login", to: LoginPage }
page LoginPage {
  component: import Login from "@client/pages/auth/Login.jsx"
}
route SignupRoute { path: "/signup", to: SignupPage }
page SignupPage {
  component: import Signup from "@client/pages/auth/Signup.jsx"
}

// ...

page MainPage {
  authRequired: true,
  component: import Main from "@client/MainPage"
}

entity User {=psl
  id           Int           @id @default(autoincrement())
  username     String        @unique
  password     String
  role         String
  status       Boolean       @default(false)
  lastActive   DateTime
  documents    Document[]
  messages     Message[]
  vaccinations Vaccination[]
  certificates Certificate[]
psl=}

entity Message {=psl
  id         Int      @id @default(autoincrement())
  content    String
  senderId   Int
  receiverId Int
  isRead     Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  User       User?    @relation(fields: [userId], references: [id])
  userId     Int?
psl=}

entity Document {=psl
  id        Int      @id @default(autoincrement())
  name      String
  file      String
  ownerId   Int
  createdAt DateTime @default(now())
  User      User?    @relation(fields: [userId], references: [id])
  userId    Int?
psl=}

entity Vaccination {=psl
  id     Int      @id @default(autoincrement())
  date   DateTime
  userId Int
  User   User     @relation(fields: [userId], references: [id])
psl=}

entity Certificate {=psl
  id         Int      @id @default(autoincrement())
  name       String
  dateIssued DateTime
  expiryDate DateTime
  userId     Int
  User       User     @relation(fields: [userId], references: [id])
psl=}

action createMessage {
  fn: import { createMessage } from "@server/actions.js",
  entities: [User, Message],
}

action markMessageAsRead {
  fn: import { markMessageAsRead } from "@server/actions.js",
  entities: [Message],
}

action uploadDocument {
  fn: import { uploadDocument } from "@server/actions.js",
  entities: [User, Document],
}

query getUser {
  fn: import { getUser } from "@server/queries.js",
  entities: [User],
}

query getMessages {
  fn: import { getMessages } from "@server/queries.js",
  entities: [User, Message],
}

query getDocuments {
  fn: import { getDocuments } from "@server/queries.js",
  entities: [User, Document],
}

route DashboardRoute { path: "/", to: DashboardPage }
page DashboardPage {
  component: import { DashboardPage } from "@client/pages/Dashboard.jsx",
  authRequired: true,
}

route MessageRoute { path: "/message/:messageId", to: MessagePage }
page MessagePage {
  component: import { Message } from "@client/pages/Message.jsx",
  authRequired: true,
}

route DocumentRoute { path: "/document/:documentId", to: DocumentPage }
page DocumentPage {
  component: import { DocumentPage } from "@client/pages/Document.jsx",
  authRequired: true,
}
